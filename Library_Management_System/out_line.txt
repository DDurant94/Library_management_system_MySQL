1. Establish a connection to the MySQL database using the mysql-connector-python library. Done

2. Create a database cursor to execute SQL queries. Functions for Data Manipulation: Done

3. Create functions for adding new books, users, authors, and genres to the database.

4. Implement functions for updating book availability, marking books as borrowed or returned.

5. Develop functions for searching books by ISBN, title, author, or genre.

6. Define functions for displaying lists of books, users, authors, and genres.

7. Implement functions for user registration and viewing user details. User Interface Functions:

8. Create a user-friendly command-line interface (CLI) with clear menu options. Done

9. Implement functions to handle user interactions using the input() function. Done

10. Validate user input using regular expressions (regex) to ensure proper formatting. Error Handling: 

11. Use try, except, else, and finally blocks to manage errors gracefully. Done

12. Handle exceptions related to database operations, input validation, and other potential issues. Done

13. Provide informative error messages to guide users. Clean Code Principles:

14. Use meaningful variable and function names that convey their purpose. Done

15. Write clear comments and docstrings to explain the functionality of functions and classes.

16. Follow PEP 8 style guidelines for code formatting and structure.

17. Ensure proper indentation and spacing for readability. Modular Design: Done

18. Organize code into separate modules to promote modularity and maintainability. Done

19. Create distinct modules for database operations, user interactions, error handling, and core functionalities. GitHub Repository:

20. Create a GitHub repository for your project and commit code regularly.

21. Maintain a clean and interactive README.md file in your GitHub repository, providing clear instructions on how to run the 
application and explanations of its features.

22. Include a link to your GitHub repository in your project documentation. Optional Bonus Points:

23. User Authentication (Bonus): Implement a user authentication system that requires users to create accounts and log in before 
accessing the library. This enhances security and allows for personalized features.

24. Due Dates for Borrowed Books (Bonus): Enhance the system by assigning due dates to borrowed books. When users 
borrow a book, the system should calculate and display the due date.

25. Fine Calculation (Bonus): Implement a fine calculation system for overdue books. Users who exceed the due date 
should be charged fines based on predefined rules. Users should have the option to pay fines, and their accounts should be 
updated accordingly. Effective Project Communication:

26. Create a video presentation or explanation of the Library Management System project.

27. Demonstrate the ability to explain technical concepts and project details in a concise and understandable manner.




- Adding a new book with all relevant details.
- Allowing users to borrow a book, marking it as "Borrowed."
- Allowing users to return a book, marking it as "Available."
- Searching for a book by its unique identifier (ISBN or title) and displaying its details.
- Displaying a list of all books with their unique identifiers.
- Adding a new user with user details.
- Viewing user details.
- Displaying a list of all users.
- Adding a new author with author details.
- Viewing author details.
- Displaying a list of all authors.
- Adding a new genre with genre details.
- Viewing genre details.
- Displaying a list of all genres.
- Quitting the application.